{"componentChunkName":"component---src-templates-blog-post-js","path":"/unit-testing/","webpackCompilationHash":"73be459192e94da462fb","result":{"data":{"site":{"siteMetadata":{"title":"Insights","author":"Dmitry Snisarenko"}},"markdownRemark":{"id":"3a4ac92a-9428-5c31-a0d4-00bfc26c685e","excerpt":"While unit testing may contribute to overall product’s quality and help\npreventing some refactoring mistakes most organisations suffer because of unit\ntesting…","html":"<img alt=\"build passing\" src=\"/blog/af3359b6a330e8be6d21e0274c77bc30/build-passing.svg\">\n<img alt=\"coverage 100%\" src=\"/blog/2f58c16b61ae3cda1d079bc577ebca66/coverage-100.svg\">\n<img alt=\"the code is bug free i swear\" src=\"/blog/50f06769a8ed80ce21edd60238dd3ea3/the_code_is_bug_free-i_swear.svg\">\n<p>While unit testing <em>may</em> contribute to overall product’s quality and help\npreventing some refactoring mistakes most organisations suffer because of unit\ntesting by doing it incorrectly being biased by certain beliefs and\nmisconceptions.</p>\n<h2>Beliefs and misconceptions</h2>\n<p>Let’s start with some beliefs and misconceptions.</p>\n<h3>TDD is about unit testing</h3>\n<p><em>TDD</em> is a design process intended to improve code’s quality and it’s about\ncreating tests before writing code. Contrarily, <em>unit testing</em> is a process of\ncovering existing code with tests. Unit testing does not supply overall code’s\nquality but <em>may</em> lead to further refactoring of existing code.</p>\n<p>TDD helps in creating decoupled, cohesive, and modular code. Unit testing may\ncontribute to code coupling and create problems for further refactoring.</p>\n<p><a href=\"https://xebia.com/blog/tdd-not-unit-tests/\">This article</a> explains why TDD is\nnot about unit testing.</p>\n<h3>Tests prevent bugs</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// plus.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// plus.spec.js</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should correctly add two numbers\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above code isn’t bug free but it’s tested.</p>\n<p>The point is duplicating logic in different files doesn’t prove the code works\ncorrectly.</p>\n<p>The next misconception derives from the current but it’s worth listing\nseparately</p>\n<h3>100% coverage make code absolutely bug free</h3>\n<p>While previous example shows why code coverage can not guarantee code quality,\n<strong>100% coverage</strong> misconception derives from another bias created by combination\nof facts:</p>\n<p><em>our code is not fully covered</em> <strong>+</strong> <em>we have bugs</em> <strong>=</strong> <em>covering our code\nwill free us from bugs</em>.</p>\n<p>It’s easy to dive into this conclusion being backed up the previous belief of\n<em>Tests prevent bugs</em>.</p>\n<p>The disappointment in unit testing may arise as soon as organisation reaches the\nmagical 100% in code coverage but still suffers of bugs.</p>\n<h3>Tests protect from accidental code changes</h3>\n<p>Consider the next scenario:</p>\n<ol>\n<li>developer changed the code on purpose and unintentionally made a mistake</li>\n<li>unit tests <em>expectedly</em> failed, because code has changed</li>\n<li>developer <em>fixed</em> the failing unit test</li>\n<li>PR created</li>\n</ol>\n<p>What is the chance the erroneous change to be approved by another developer\nduring the code review? Errors defended by unit tests have better chance to be\napproved. Especially if approving person also has religious beliefs about unit\ntesting.</p>\n<h2>Typical mistakes</h2>\n<p>The below mistakes indicate problems with code. While the best solution might be\nrefactoring of existing code, the overall observation is: <strong>your project doesn’t\nneed that kind of tests</strong>.</p>\n<h4>Expose code’s internal structure</h4>\n<p>Symptoms:</p>\n<ul>\n<li>mock the response of internally-called function</li>\n<li>it’s difficult to give the assertion proper name and most of the time one\nassertion test <em>everything</em> <code class=\"language-text\">it(&#39;should work correctly&#39;, () =&gt; {})</code></li>\n</ul>\n<h4>Test 3rd party libraries</h4>\n<p>Symptoms:</p>\n<ul>\n<li>insuring 3rd party library works as expected</li>\n<li>too many mocks, pre and post conditions</li>\n</ul>\n<p>Most of the time it reveals by testing view and controller layer of the app.</p>\n<h4>Testing for the sake of testing</h4>\n<p>Symptom: testing of a trivial code.</p>\n<h4>Conditional logic in unit tests</h4>\n<p>Symptom: conditional logic in unit tests (<code class=\"language-text\">if</code>, <code class=\"language-text\">switch</code>, <code class=\"language-text\">while</code>, etc).</p>","frontmatter":{"title":"On unit testing","date":"November 03, 2018","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/unit-testing/","previous":{"fields":{"slug":"/deploy-dist-folder-to-gh-pages-with-circleci/"},"frontmatter":{"title":"Deploy dist folder to GitHub Pages with CircleCI"}},"next":{"fields":{"slug":"/a-better-way-of-displaying-local-loader-in-angular-application/"},"frontmatter":{"title":"A better way of displaying local loader in Angular application"}}}}}