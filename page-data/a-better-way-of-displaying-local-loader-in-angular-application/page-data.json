{"componentChunkName":"component---src-templates-blog-post-js","path":"/a-better-way-of-displaying-local-loader-in-angular-application/","webpackCompilationHash":"02d78ce7d7b699cdf6c4","result":{"data":{"site":{"siteMetadata":{"title":"Insights","author":"Dmitry Snisarenko"}},"markdownRemark":{"id":"5e6c1d12-242f-5f34-ba61-14a3dd05b674","excerpt":"Not so good You’ve probably seen the above construct in your project. I’ve been\ndoing the same either. This way doesn’t look correct to me. Indeed this way of…","html":"<h2>Not so good</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">displayLoader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productsService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hideLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You’ve probably seen the above construct in your project. I’ve been\ndoing the same either. This way doesn’t look correct to me. Indeed this way of displaying and hiding\nloaders produces so-called <em>temporal coupling</em> by separating display/hide actions and welding hide together with\nservice function making it impossible to call <code class=\"language-text\">this.productsService.getAll()</code> without preliminary calling <code class=\"language-text\">displayLoader(&#39;loading&#39;)</code>.</p>\n<p>The problem turns obvious as soon as the necessity of reusing <code class=\"language-text\">this.productsService.getAll()</code> method in component\nemerges and we inevitably wrap the call into separate function:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">public</span> <span class=\"token function\">getAllProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">displayLoader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productsService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n          <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hideLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">products</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>products <span class=\"token operator\">=</span> products<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One more drawback of this method is inability of using it with\n<code class=\"language-text\">async</code> pipe and inevitably forcing developers to manage subscriptions manually.</p>\n<h2>The better</h2>\n<p>The better way would be to automatically display loader on every subscription.\nUnfortunately RxJS does not provide a ready-to-use operator for this.</p>\n<p>That’s why we’re going to create our own <code class=\"language-text\">doOnSubscribe</code> pipe operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// do-on-subscribe.operator.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defer<span class=\"token punctuation\">,</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doOnSubscribe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">onSubscribe</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">source<span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After <code class=\"language-text\">doOnSubscribe</code> operator is ready we can use it on HttpClient observables:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>allProducts$ <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productsService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">doOnSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">displayLoader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hideLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above method guaranties loader would be properly displayed and hidden on every subscription.\nThe newly created “pure” observable could be used with <code class=\"language-text\">async</code> pipe or in combination with other observables:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let product of allProducts$ | async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ product.name }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>","frontmatter":{"title":"A better way of displaying local loader in Angular application","date":"December 12, 2018","description":"How to show and hide loader automatically."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/a-better-way-of-displaying-local-loader-in-angular-application/","previous":{"fields":{"slug":"/unit-testing/"},"frontmatter":{"title":"On unit testing"}},"next":{"fields":{"slug":"/inheritance/"},"frontmatter":{"title":"On class inheritance"}}}}}