<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on A bit of insight into software design</title>
    <link>https://sneas.github.io/blog/categories/design/</link>
    <description>Recent content in Design on A bit of insight into software design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Jan 2019 09:21:00 +0100</lastBuildDate>
    
	<atom:link href="https://sneas.github.io/blog/categories/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A problem with class inheritance</title>
      <link>https://sneas.github.io/blog/inheritance-problem/</link>
      <pubDate>Thu, 03 Jan 2019 09:21:00 +0100</pubDate>
      
      <guid>https://sneas.github.io/blog/inheritance-problem/</guid>
      <description>Favor object composition over class inheritance.
Gang of Four in Design Patterns: Elements of Reusable Object-Oriented Software  GoF stated this over two decades ago. Some warmly accepted languages (Go, Rust) refused of inheritance at all. But it seems many developers haven&amp;rsquo;t gotten the problem and still do inheritance to share code between classes. The code looks advanced at the first glance. But evolves into a chimera in no time.</description>
    </item>
    
  </channel>
</rss>