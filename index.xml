<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A bit of insight into software design</title>
    <link>https://sneas.github.io/blog/</link>
    <description>Recent content on A bit of insight into software design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Mar 2019 13:07:35 +0100</lastBuildDate>
    
	<atom:link href="https://sneas.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An alternative way of passing parameter into event handler in React</title>
      <link>https://sneas.github.io/blog/react-event-handler-parameter/</link>
      <pubDate>Sat, 02 Mar 2019 13:07:35 +0100</pubDate>
      
      <guid>https://sneas.github.io/blog/react-event-handler-parameter/</guid>
      <description>There are two popular ways of passing parameters into event handlers in React. Let have a look at them first.
Currying class List extends Component { handleClick = (index) =&amp;gt; (e) =&amp;gt; { // Do something with index } render() { return ( &amp;lt;ul&amp;gt; {this.props.items.map((itemText, index) =&amp;gt; ( &amp;lt;li key={index} onClick={this.handleClick(index)} &amp;gt; {{itemText}} &amp;lt;/li&amp;gt; ))} &amp;lt;/ul&amp;gt; ); } }  Pros
 Clean and simple syntax  Cons
 The solution generates a new function for each list item which increases memory consumption  Sub components var List = createReactClass({ render() { return ( &amp;lt;ul&amp;gt; {this.</description>
    </item>
    
    <item>
      <title>A problem with class inheritance</title>
      <link>https://sneas.github.io/blog/inheritance-problem/</link>
      <pubDate>Thu, 03 Jan 2019 09:21:00 +0100</pubDate>
      
      <guid>https://sneas.github.io/blog/inheritance-problem/</guid>
      <description>Favor object composition over class inheritance.
Gang of Four in Design Patterns: Elements of Reusable Object-Oriented Software  GoF stated this over two decades ago. Some warmly accepted languages (Go, Rust) refused of inheritance at all. But it seems many developers haven&amp;rsquo;t gotten the problem and still do inheritance to share code between classes. The code looks advanced at the first glance. But evolves into a chimera in no time.</description>
    </item>
    
    <item>
      <title>A better way of displaying local loader in Angular application</title>
      <link>https://sneas.github.io/blog/a-better-way-of-displaying-local-loader-in-angular-application/</link>
      <pubDate>Wed, 12 Dec 2018 16:16:23 +0100</pubDate>
      
      <guid>https://sneas.github.io/blog/a-better-way-of-displaying-local-loader-in-angular-application/</guid>
      <description>Not so good displayLoader(&#39;Loading...&#39;); this.productsService.getAll() .pipe( finalize(() =&amp;gt; hideLoader()) );  You&amp;rsquo;ve probably seen the above construct in your project. I&amp;rsquo;ve been doing the same either. This way doesn&amp;rsquo;t look correct to me. Indeed this way of displaying and hiding loaders produces so-called temporal coupling by separating display/hide actions and welding hide together with service function making it impossible to call this.productsService.getAll() without preliminary calling displayLoader(&#39;loading&#39;).
The problem turns obvious as soon as the necessity of reusing this.</description>
    </item>
    
    <item>
      <title>Unit testing mistakes, beliefs and misconceptions</title>
      <link>https://sneas.github.io/blog/unit-testing-mistakes-beliefs-and-misconceptions/</link>
      <pubDate>Sat, 03 Nov 2018 09:06:08 +0100</pubDate>
      
      <guid>https://sneas.github.io/blog/unit-testing-mistakes-beliefs-and-misconceptions/</guid>
      <description>While unit testing may contribute to overall product&amp;rsquo;s quality and help preventing some refactoring mistakes most organisations suffer because of unit testing by doing it incorrectly being biased by certain beliefs and misconceptions.
Beliefs and misconceptions Let&amp;rsquo;s start with some beliefs and misconceptions.
TDD is about unit testing TDD is a design process intended to improve code&amp;rsquo;s quality and it&amp;rsquo;s about creating tests before writing code. Contrarily, unit testing is a process of covering existing code with tests.</description>
    </item>
    
    <item>
      <title>Deploy dist folder to GitHub Pages with CircleCI</title>
      <link>https://sneas.github.io/blog/deploy-dist-folder-to-gh-pages-with-circleci/</link>
      <pubDate>Sun, 07 Oct 2018 09:03:15 +0200</pubDate>
      
      <guid>https://sneas.github.io/blog/deploy-dist-folder-to-gh-pages-with-circleci/</guid>
      <description>I would like to share how to automatically publish generated (dist) folder to GitHub pages with the help of CircleCI. This is not a git subtree-based solution because keeping automatically generated content in Git repo is&amp;hellip; meh.
Our pre-requisites are:
 dist folder is automatically generated by a script on CI dist folder is excluded from Git repo by .gitignore gh-pages gets auto refreshed with the latest content from dist folder on each commit  Current blog is successfully working with the same principles.</description>
    </item>
    
    <item>
      <title>OMG! The blog is working</title>
      <link>https://sneas.github.io/blog/its-working/</link>
      <pubDate>Sat, 06 Oct 2018 13:20:56 +0200</pubDate>
      
      <guid>https://sneas.github.io/blog/its-working/</guid>
      <description>And not only working. It&amp;rsquo;s fully automated with the help of CircleCI.
How it works?
 The blog files are stored on GitHub. It&amp;rsquo;s markdown. Every time I do a commit in order to create or update a page, the blog gets regenerated and published on GitHub Pages.  I spent some time configuring CircleCI to automatically publish blog&amp;rsquo;s content. I&amp;rsquo;m going to explain how to do it in the next post.</description>
    </item>
    
  </channel>
</rss>